// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using iFinanceAPI.DBContext;

#nullable disable

namespace iFinanceAPI.Migrations
{
    [DbContext(typeof(ApiContext))]
    partial class ApiContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FinanceControlServices.Models.EntityServiceModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("MonthlyBalanceId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("MonthlyBalanceId");

                    b.ToTable("EntityServiceModel");
                });

            modelBuilder.Entity("FinanceControlServices.Models.MonthlyBalanceServiceModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuarterlyBalanceId")
                        .HasColumnType("int");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("QuarterlyBalanceId");

                    b.ToTable("MonthlyBalanceServiceModel");
                });

            modelBuilder.Entity("FinanceControlServices.Models.QuarterlyBalanceServiceModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("YearlyBalanceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("YearlyBalanceId");

                    b.ToTable("QuarterlyBalanceServiceModel");
                });

            modelBuilder.Entity("FinanceControlServices.Models.RecurringEntityServiceModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("MonthlyBalanceId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("MonthlyBalanceId");

                    b.ToTable("RecurringEntityServiceModel");
                });

            modelBuilder.Entity("FinanceControlServices.Models.YearlyBalanceServiceModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("YearlyBalances");
                });

            modelBuilder.Entity("UserService.Models.UserServiceModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FinanceControlServices.Models.EntityServiceModel", b =>
                {
                    b.HasOne("FinanceControlServices.Models.MonthlyBalanceServiceModel", "MonthlyBalance")
                        .WithMany("Entities")
                        .HasForeignKey("MonthlyBalanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MonthlyBalance");
                });

            modelBuilder.Entity("FinanceControlServices.Models.MonthlyBalanceServiceModel", b =>
                {
                    b.HasOne("FinanceControlServices.Models.QuarterlyBalanceServiceModel", "QuarterlyBalance")
                        .WithMany("MonthlyBalances")
                        .HasForeignKey("QuarterlyBalanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuarterlyBalance");
                });

            modelBuilder.Entity("FinanceControlServices.Models.QuarterlyBalanceServiceModel", b =>
                {
                    b.HasOne("FinanceControlServices.Models.YearlyBalanceServiceModel", "YearlyBalance")
                        .WithMany("QuarterlyBalances")
                        .HasForeignKey("YearlyBalanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("YearlyBalance");
                });

            modelBuilder.Entity("FinanceControlServices.Models.RecurringEntityServiceModel", b =>
                {
                    b.HasOne("FinanceControlServices.Models.MonthlyBalanceServiceModel", "MonthlyBalance")
                        .WithMany("RecurringEntities")
                        .HasForeignKey("MonthlyBalanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MonthlyBalance");
                });

            modelBuilder.Entity("FinanceControlServices.Models.MonthlyBalanceServiceModel", b =>
                {
                    b.Navigation("Entities");

                    b.Navigation("RecurringEntities");
                });

            modelBuilder.Entity("FinanceControlServices.Models.QuarterlyBalanceServiceModel", b =>
                {
                    b.Navigation("MonthlyBalances");
                });

            modelBuilder.Entity("FinanceControlServices.Models.YearlyBalanceServiceModel", b =>
                {
                    b.Navigation("QuarterlyBalances");
                });
#pragma warning restore 612, 618
        }
    }
}
